#version 460

#extension GL_GOOGLE_include_directive: require
#include "common.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 0) const uint SAMPLES_PER_SEGMENT = 1;
layout(constant_id = 1) const uint VERTICES_PER_SAMPLE = 1;

layout(binding = 0) buffer index_buffer {
    uint indices[];
};

layout(binding = 1) buffer vertex_buffer {
    AlignedVertex vertices[];
};

layout(push_constant) uniform PushConstant {
    ComputePushConstants pc;
};

// https://gist.github.com/kevinmoran/b45980723e53edeb8a5a43c49f134724
mat3 rotate_align(vec3 v1, vec3 v2)
{
    const vec3 axis = cross(v1, v2);
    const float cos_a = dot(v1, v2);
    const float k = 1.0 / (1.0 + cos_a);
    return mat3(vec3((axis.x * axis.x * k) + cos_a, (axis.y * axis.x * k) - axis.z, (axis.z * axis.x * k) + axis.y),
                vec3((axis.x * axis.y * k) + axis.z, (axis.y * axis.y * k) + cos_a, (axis.z * axis.y * k) - axis.x),
                vec3((axis.x * axis.z * k) - axis.y, (axis.y * axis.z * k) + axis.x, (axis.z * axis.z * k) + cos_a));
}

mat3 get_rotation_around_x(float angle)
{
    const float cos_a = cos(radians(angle));
    const float sin_a = sin(radians(angle));
    return mat3(vec3(1.0, 0.0, 0.0),
                vec3(0.0, cos_a, sin_a),
                vec3(0.0, -sin_a, cos_a));
}

void main()
{
    if (gl_GlobalInvocationID.x >= SAMPLES_PER_SEGMENT * VERTICES_PER_SAMPLE) return;
    vec3 plane_normal = normalize(pc.p1 - pc.p0);
    // what circle of vertices this thread belongs to
    uint sample_circle_id = gl_GlobalInvocationID.x / VERTICES_PER_SAMPLE;
    // what vertex in the circle this thread belongs to
    uint vertex_id = gl_GlobalInvocationID.x % VERTICES_PER_SAMPLE;
    // if the two vectors point in opposite direction the rotation matrix is not clearly defined, use rotation around x by 180 degrees then
    mat3 rotation_matrix = dot(vec3(1.0, 0.0, 0.0), plane_normal) <= -0.999999 ? get_rotation_around_x(180) : rotate_align(vec3(1.0, 0.0, 0.0), plane_normal);
    vec3 step_vector = (pc.p2 - pc.p0) / (SAMPLES_PER_SEGMENT - 1);
    vec3 vertex_pos = get_rotation_around_x((360.0 / VERTICES_PER_SAMPLE) * vertex_id) * vec3(0.0, 1.0, 0.0);
    vec3 normal = rotation_matrix * (-vertex_pos);
    vertex_pos *= 20.0;
    vertex_pos = rotation_matrix * vertex_pos + pc.p0 + sample_circle_id * step_vector;

    vertices[indices[pc.indices_start_idx] + gl_GlobalInvocationID.x].pos_normal_x = vec4(vertex_pos, normal.x);
    vertices[indices[pc.indices_start_idx] + gl_GlobalInvocationID.x].normal_yz_color_rg = vec4(normal.yz, 0.0, 0.0);
    vertices[indices[pc.indices_start_idx] + gl_GlobalInvocationID.x].color_ba_tex.xy = vec2(0.8, 1.0);
}
