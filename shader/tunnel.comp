#version 460

#extension GL_GOOGLE_include_directive: require
#include "common.glsl"
#include "utils.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 0) const uint SEGMENT_COUNT = 1;
layout(constant_id = 1) const uint SAMPLES_PER_SEGMENT = 1;
layout(constant_id = 2) const uint VERTICES_PER_SAMPLE = 1;
layout(constant_id = 3) const uint FIREFLIES_PER_SEGMENT = 1;

layout(binding = 0) buffer TunnelIndexBuffer {
    uint indices[];
};

layout(binding = 1) buffer TunnelVertexBuffer {
    AlignedTunnelVertex vertices[];
};

layout(binding = 2) buffer FireflyVertexBuffer {
    AlignedFireflyVertex firefly_vertices[];
};

layout(binding = 3) buffer TunnelBezierPointsBuffer {
    vec3 tunnel_bezier_points[];
};

layout(push_constant) uniform PushConstant {
    NewSegmentPushConstants pc;
};

float random(vec2 st) {
    st = vec2(dot(st,vec2(127.1, 311.7)), dot(st,vec2(269.5, 183.3)));
    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

// from "The Book of Shaders": Cellular Noise
// Permutation polynomial: (34x^2 + x) mod 289
vec3 permute(vec3 x) {
    return mod((34.0 * x + 1.0) * x, 289.0);
}

// Cellular noise, returning F1 and F2 in a vec2.
// Standard 3x3 search window for good F1 and F2 values
float cellular(vec2 P) {
    #define K 0.142857142857 // 1/7
    #define Ko 0.428571428571 // 3/7
    #define jitter 1.0 // Less gives more regular pattern
    vec2 Pi = mod(floor(P), 289.0);
     vec2 Pf = fract(P);
    vec3 oi = vec3(-1.0, 0.0, 1.0);
    vec3 of = vec3(-0.5, 0.5, 1.5);
    vec3 px = permute(Pi.x + oi);
    vec3 p = permute(px.x + Pi.y + oi); // p11, p12, p13
    vec3 ox = fract(p*K) - Ko;
    vec3 oy = mod(floor(p*K),7.0)*K - Ko;
    vec3 dx = Pf.x + 0.5 + jitter*ox;
    vec3 dy = Pf.y - of + jitter*oy;
    vec3 d1 = dx * dx + dy * dy; // d11, d12 and d13, squared
    p = permute(px.y + Pi.y + oi); // p21, p22, p23
    ox = fract(p*K) - Ko;
    oy = mod(floor(p*K),7.0)*K - Ko;
    dx = Pf.x - 0.5 + jitter*ox;
    dy = Pf.y - of + jitter*oy;
    vec3 d2 = dx * dx + dy * dy; // d21, d22 and d23, squared
    p = permute(px.z + Pi.y + oi); // p31, p32, p33
    ox = fract(p*K) - Ko;
    oy = mod(floor(p*K),7.0)*K - Ko;
    dx = Pf.x - 1.5 + jitter*ox;
    dy = Pf.y - of + jitter*oy;
    vec3 d3 = dx * dx + dy * dy; // d31, d32 and d33, squared
    // Sort out the two smallest distances (F1, F2)
    vec3 d1a = min(d1, d2);
    d2 = max(d1, d2); // Swap to keep candidates for F2
    d2 = min(d2, d3); // neither F1 nor F2 are now in d3
    d1 = min(d1a, d2); // F1 is now in d1
    d2 = max(d1a, d2); // Swap to keep candidates for F2
    d1.xy = (d1.x < d1.y) ? d1.xy : d1.yx; // Swap if smaller
    d1.xz = (d1.x < d1.z) ? d1.xz : d1.zx; // F1 is in d1.x
    d1.yz = min(d1.yz, d2.yz); // F2 is now not in d2.yz
    d1.y = min(d1.y, d1.z); // nor in  d1.z
    d1.y = min(d1.y, d2.x); // F2 is in d1.y, we're done.
    vec2 F = sqrt(d1.xy);
    return 0.1+(F.y-F.x);
}

void main()
{
    if (gl_GlobalInvocationID.x == 0)
    {
        tunnel_bezier_points[(pc.segment_uid * 2 + 1) % (SEGMENT_COUNT * 2 + 3)] = pc.p1;
        tunnel_bezier_points[(pc.segment_uid * 2 + 2) % (SEGMENT_COUNT * 2 + 3)] = pc.p2;
    }
    if (gl_GlobalInvocationID.x < SAMPLES_PER_SEGMENT * VERTICES_PER_SAMPLE)
    {
        // what circle of vertices this thread belongs to
        uint sample_circle_id = gl_GlobalInvocationID.x / VERTICES_PER_SAMPLE;
        // what vertex in the circle this thread belongs to
        uint vertex_id = gl_GlobalInvocationID.x % VERTICES_PER_SAMPLE;
        // interpolate over bézier points to get position and normal of sample
        float t = float(sample_circle_id) / float(SAMPLES_PER_SEGMENT - 1);
        vec3 sample_pos = pow(1 - t, 2) * pc.p0 + (2 - 2 * t) * t * pc.p1 + pow(t, 2) * pc.p2;
        // normal is given by derivative
        vec3 plane_normal = normalize((2 - 2 * t) * (pc.p1 - pc.p0) + 2 * t * (pc.p2 - pc.p1));
        // calculate vector that lies in the plane of the circle
        const vec3 first_dir = normalize(pc.p1 - pc.p0);
        const vec3 cross_vector = abs(dot(first_dir, vec3(1.0, 0.0, 0.0))) >= 0.999999 ? cross(first_dir, normalize(vec3(0.99, 0.0, 0.01))) : cross(first_dir, vec3(1.0, 0.0, 0.0));
        vec3 plane_vector = cross(plane_normal, cross_vector);
        // vector from center of circle to vertex position
        vec3 vertex_pos = normalize(rotate(plane_vector, plane_normal, (360.0 / VERTICES_PER_SAMPLE) * vertex_id));
        TunnelVertex v;
        v.tex = vec2(abs((pc.segment_uid % 2) - float(sample_circle_id) / float(SAMPLES_PER_SEGMENT - 1)), abs((float(vertex_id) / float(VERTICES_PER_SAMPLE)) * 2.0 - 1.0));
        vec2 scaled_tex = vec2(v.tex.s * 2.0 + pc.segment_uid, v.tex.t * 3.0);
        float height = cellular(scaled_tex) * (-pow(((float(sample_circle_id) * 2.0) / float(SAMPLES_PER_SEGMENT - 1) - 1), 2) + 1.0);
        vertex_pos *= 20.0 - height * 12.0;
        // actual position of vertex
        vertex_pos += sample_pos;

        v.pos = vertex_pos;
        v.segment_uid = pc.segment_uid;
        vertices[indices[pc.indices_start_idx] + gl_GlobalInvocationID.x] = pack_tunnel_vertex(v);
    }
    if (gl_GlobalInvocationID.x < FIREFLIES_PER_SEGMENT)
    {
        float t = random(vec2(gl_GlobalInvocationID.x, pc.segment_uid));
        uint idx = (pc.segment_uid % SEGMENT_COUNT) * FIREFLIES_PER_SEGMENT + gl_GlobalInvocationID.x;
        // spawn lights in the middle of the tunnel by using a random position on the bézier curve
        FireflyVertex v;
        v.pos = pow(1 - t, 2) * pc.p0 + (2 - 2 * t) * t * pc.p1 + pow(t, 2) * pc.p2;
        v.col = vec3(1.0, 0.0, 1.0);
        v.vel = vec3(0.0, 0.0, 0.0);
        v.acc = vec3(1.0, 1.0, 1.0);
        firefly_vertices[idx] = pack_firefly_vertex(v);
    }
}
