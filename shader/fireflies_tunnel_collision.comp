#version 460

#extension GL_GOOGLE_include_directive: require
#include "common.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(constant_id = 0) const uint SEGMENT_COUNT = 1;
layout(constant_id = 1) const uint SAMPLES_PER_SEGMENT = 1;
layout(constant_id = 2) const uint VERTICES_PER_SAMPLE = 1;
layout(constant_id = 3) const uint FIREFLIES_PER_SEGMENT = 1;
layout(constant_id = 4) const uint FIREFLIES_COUNT = 1;
layout(constant_id = 5) const uint INDICES_PER_SEGMENT = 1;

layout(binding = 0) readonly buffer InVertexBuffer {
    AlignedFireflyVertex in_vertices[];
};

layout(binding = 1) buffer OutVertexBuffer {
    AlignedFireflyVertex out_vertices[];
};

layout(binding = 3) buffer TunnelBezierPointsBuffer {
    vec3 tunnel_bezier_points[];
};

layout(binding = 4) buffer TunnelIndexBuffer {
    uint tunnel_indices[];
};

layout(binding = 5) buffer TunnelVertexBuffer {
    AlignedTunnelVertex tunnel_vertices[];
};

layout(push_constant) uniform PushConstant {
    FireflyMovePushConstants pc;
};

bool intersect_triangle(in vec3 p, in vec3 dir, in float max_t, in vec3 a, in vec3 b, in vec3 c, out float t, out vec2 bary)
{
    vec3 i = b - a;
    vec3 j = c - a;
    vec3 k = p - a;
    vec3 r = dir;
  
    // (t, u, v) = (1 / (r x j) * i) ((k x i) * j, (r x j) * k, (k x i) * r)
    vec3 rxj = cross(r, j);
    float rxji = dot(rxj, i);
    if (abs(rxji) < 1e-16) return false;
    float f = 1.0f / rxji;
    
    bary.x = dot(rxj, k) * f;
    if (bary.x < 0.0f || bary.x > 1.0f) return false;
    vec3 kxi = cross(k, i);
    bary.y =  dot(kxi, r) * f;
    if (bary.y < 0.0 || bary.y > 1.0) return false;
    if (bary.x + bary.y > 1.0) return false;
    
    t = dot(kxi, j) * f;
    return (t > 0.0 && t < max_t);
}

bool intersect_tunnel(in vec3 old_pos, in vec3 new_pos, in uint segment_idx, out vec3 normal)
{
    if (distance(new_pos, old_pos) < 0.0000001) return false;
    float t = 0.0;
    vec2 bary = vec2(0.0, 0.0);
    // one thread for every triangle that needs to be tested
    const uint p0_idx = tunnel_indices[pc.first_segment_indices_idx + INDICES_PER_SEGMENT * segment_idx + gl_GlobalInvocationID.y * 3];
    const uint p1_idx = tunnel_indices[pc.first_segment_indices_idx + INDICES_PER_SEGMENT * segment_idx + gl_GlobalInvocationID.y * 3 + 1];
    const uint p2_idx = tunnel_indices[pc.first_segment_indices_idx + INDICES_PER_SEGMENT * segment_idx + gl_GlobalInvocationID.y * 3 + 2];
    vec3 p0 = get_tunnel_vertex_pos(tunnel_vertices[p0_idx]);
    vec3 p1 = get_tunnel_vertex_pos(tunnel_vertices[p1_idx]);
    vec3 p2 = get_tunnel_vertex_pos(tunnel_vertices[p2_idx]);
    if (intersect_triangle(old_pos, normalize(new_pos - old_pos), distance(new_pos, old_pos) + 0.5, p0, p1, p2, t, bary))
    {
        normal = cross(normalize(p1 - p0), normalize(p2 - p0));
        return true;
    }
    return false;
}

void main()
{
    if (gl_GlobalInvocationID.x >= FIREFLIES_COUNT || gl_GlobalInvocationID.y >= INDICES_PER_SEGMENT / 3) return;

    // calculate uid of segment firefly is located in
    uint segment_uid = (pc.segment_uid - SEGMENT_COUNT + 1) + gl_GlobalInvocationID.x / FIREFLIES_PER_SEGMENT;
    // also, calculate the index of the segment in the currently rendered tunnel segments
    uint segment_idx = gl_GlobalInvocationID.x / FIREFLIES_PER_SEGMENT;
    uint firefly_idx = (segment_uid * FIREFLIES_PER_SEGMENT) % FIREFLIES_COUNT + gl_GlobalInvocationID.x % FIREFLIES_PER_SEGMENT;

    vec3 old_v_pos = get_firefly_vertex_pos(in_vertices[firefly_idx]);

    vec3 normal;
    if (intersect_tunnel(old_v_pos, get_firefly_vertex_pos(out_vertices[firefly_idx]), segment_idx, normal))
    {
        set_firefly_vertex_pos(out_vertices[firefly_idx], old_v_pos);
        vec3 v_vel = get_firefly_vertex_vel(out_vertices[firefly_idx]);
        set_firefly_vertex_vel(out_vertices[firefly_idx], reflect(v_vel, normal));
    }
}
