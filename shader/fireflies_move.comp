#version 460

#extension GL_GOOGLE_include_directive: require
#include "common.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 0) const uint SEGMENT_COUNT = 1;
layout(constant_id = 1) const uint SAMPLES_PER_SEGMENT = 1;
layout(constant_id = 2) const uint VERTICES_PER_SAMPLE = 1;
layout(constant_id = 3) const uint FIREFLIES_PER_SEGMENT = 1;
layout(constant_id = 4) const uint FIREFLIES_COUNT = 1;
layout(constant_id = 5) const uint INDICES_PER_SEGMENT = 1;

layout(binding = 0) readonly buffer InVertexBuffer {
    AlignedFireflyVertex in_vertices[];
};

layout(binding = 1) buffer OutVertexBuffer {
    AlignedFireflyVertex out_vertices[];
};

layout(binding = 3) buffer TunnelBezierPointsBuffer {
    vec3 tunnel_bezier_points[];
};

layout(binding = 4) buffer TunnelIndexBuffer {
    uint tunnel_indices[];
};

layout(binding = 5) buffer TunnelVertexBuffer {
    AlignedTunnelVertex tunnel_vertices[];
};

layout(binding = 6) readonly buffer BoundingBoxBuffer {
    BoundingBox bb;
};

layout(binding = 7) uniform BoundingBoxModelMatricesBuffer {
    ModelMatrices bb_mm;
};

layout(push_constant) uniform PushConstant {
    FireflyMovePushConstants pc;
};

uint rng_state;

uint PCGHashState()
{
    rng_state = rng_state * 747796405u + 2891336453u;
    uint state = rng_state;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

uint PCGHash(uint seed)
{
    uint state = seed * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

float pcg_random_state()
{
    return ((float(PCGHashState()) / float(0xFFFFFFFFU)) - 0.5) * 2.0;
}

float pcg_random(uint seed)
{
    return ((float(PCGHash(seed)) / float(0xFFFFFFFFU)) - 0.5) * 2.0;
}

float pcg_random_state_clipped()
{
    return cos(PI * PCGHashState()) * (((float(PCGHashState()) / float(0xFFFFFFFFU)) * 0.5) + 0.5);
}

float pcg_random_clipped(uint seed)
{
    return cos(PI * PCGHashState()) * (((float(PCGHash(seed)) / float(0xFFFFFFFFU)) * 0.5) + 0.5);
}

bool dodge_aabb(in BoundingBox bb, in vec3 pos, out vec3 new_pos)
{
    // check if firefly is in close surrounding of bounding box as the firefly has a size itself
    float distances[6] = {pos.x - bb.min_p.x, pos.y - bb.min_p.y, pos.z - bb.min_p.z, bb.max_p.x - pos.x, bb.max_p.y - pos.y, bb.max_p.z - pos.z};
    if (distances[0] > -1.0 && distances[1] > -1.0 && distances[2] > -1.0 && distances[3] > -1.0 && distances[4] > -1.0 && distances[5] > -1.0)
    {
        uint idx = 0;
        float smallest_element = distances[0];
        // move firefly to closest exit of bounding box
        // ignore z-direction as fireflies can get dragged along in this direction
        for (uint i = 1; i < 6; ++i)
        {
            if (i == 2 || i == 5) continue;
            if (distances[i] < smallest_element)
            {
                idx = i;
                smallest_element = distances[idx];
            }
        }
        smallest_element = abs(smallest_element);
        switch (idx)
        {
            case 0:
                new_pos = pos - vec3(smallest_element, 0.0, 0.0);
                break;
            case 1:
                new_pos = pos - vec3(0.0, smallest_element, 0.0);
                break;
            case 3:
                new_pos = pos + vec3(smallest_element, 0.0, 0.0);
                break;
            case 4:
                new_pos = pos + vec3(0.0, smallest_element, 0.0);
                break;
        }
        return true;
    }
    return false;
}

void main()
{
    if (gl_GlobalInvocationID.x >= FIREFLIES_COUNT) return;

    // calculate uid of segment firefly is located in
    uint segment_uid = (pc.segment_uid - SEGMENT_COUNT + 1) + gl_GlobalInvocationID.x / FIREFLIES_PER_SEGMENT;
    // also, calculate the index of the segment in the currently rendered tunnel segments
    uint segment_idx = gl_GlobalInvocationID.x / FIREFLIES_PER_SEGMENT;
    uint firefly_idx = (segment_uid * FIREFLIES_PER_SEGMENT) % FIREFLIES_COUNT + gl_GlobalInvocationID.x % FIREFLIES_PER_SEGMENT;

    // different state every 2 seconds and for every firefly
    rng_state = uint(pc.time / 2.0 + firefly_idx);
    // seed is used to have different random number in every frame
    uint seed = uint(gl_GlobalInvocationID.x + FIREFLIES_COUNT * pc.time * pc.time_diff);

    // bezier points of segment
    vec3 p0 = tunnel_bezier_points[(segment_uid * 2) % (SEGMENT_COUNT * 2 + 3)];
    vec3 p1 = tunnel_bezier_points[(segment_uid * 2 + 1) % (SEGMENT_COUNT * 2 + 3)];
    vec3 p2 = tunnel_bezier_points[(segment_uid * 2 + 2) % (SEGMENT_COUNT * 2 + 3)];

    FireflyVertex v = unpack_firefly_vertex(in_vertices[firefly_idx]);
    vec3 old_pos = v.pos;

    // set random acceleration every 2 seconds
    vec3 acc = vec3(pcg_random_state_clipped() * pcg_random_state(), pcg_random_state_clipped() * pcg_random_state(), pcg_random_state_clipped() * pcg_random_state());
    v.vel += acc * pc.time_diff;
    // reduce applied velocity by random value to simulate insect like behavior
    v.pos += pcg_random_clipped(seed) * v.vel * pc.time_diff;
    v.col = vec3(pcg_random_state() + 1.0, pcg_random_state() + 1.0, pcg_random_state() + 1.0);

    // check if firefly is inside the aabb of the ship and move it out of it if necessary
    vec3 aabb_dodge_pos;
    if (dodge_aabb(bb, (bb_mm.inv_m * vec4(v.pos, 1.0)).xyz, aabb_dodge_pos))
    {
        aabb_dodge_pos = (bb_mm.m * vec4(aabb_dodge_pos, 1.0)).xyz;
        v.vel += (aabb_dodge_pos - v.pos) / pc.time_diff;
        v.pos = aabb_dodge_pos;
    }

    // check if firefly moved out of its segment in either direction
    if (dot(normalize(v.pos - p0), normalize(p1 - p0)) < 0.0)
    {
        v.pos = old_pos;
        v.vel = reflect(v.vel, normalize(p1 - p0));
    }
    else if (dot(normalize(v.pos - p2), normalize(p2 - p1)) > 0.0)
    {
        v.pos = old_pos;
        v.vel = reflect(v.vel, normalize(p2 - p1));
    }
    v.vel = min(vec3(50.0), v.vel);
    out_vertices[firefly_idx] = pack_firefly_vertex(v);
}
